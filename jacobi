def jacobi (mat, iterations, initial vec=None):
    f = []
    for i, row in enumerate (mat):
        var = -row.pop(i)
        row[-1] *= -1
        eq = [elem/var for elem in row]
        eq[-1]*=-1
        f.append(eq)

    x=[0]*len (f) if initial_vec is None else initial_vec
    for k in range (iterations):
        xi=[]
        for i in range (len (f)):
            rest = x+[1]
            rest.pop(i)
            approx=sum(coeff*var for coeff, var in zip (f[i], rest))
            xi.append(approx)
        print (k+1, xi)
        x=xi
    return xi
if __name__=="__main__":
    M =[[20,1,-2,17], [3,20,-1,-18], [2,-3,20,25]]
    print('Matrix M:\n',M)
    itr = int(input('Enter the number of iteration: '))
    print('Solution M: ',jacobi (M, itr))
